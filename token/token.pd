namespace compiler.token;

public enum token
{
    illegal,
    eof,

	literal_begin,
	literal_identifier,
	literal_int,
	literal_float,
	literal_char,
	literal_string,
	literal_meta,
	literal_end,

	keyword_begin,
	keyword_await,
    keyword_async,
	keyword_base,
	keyword_break,
	keyword_case,
	keyword_catch,
	keyword_class,
	keyword_const,
	keyword_continue,
	keyword_default,
	keyword_else,
	keyword_enum,
	keyword_false,
	keyword_for,
	keyword_function,
	keyword_if,
	keyword_import,
	keyword_inline,
	keyword_interface,
	keyword_new,
	keyword_null,
	keyword_namespace,
	keyword_public,
	keyword_return,
	keyword_static,
	keyword_switch,
	keyword_this,
	keyword_throw,
	keyword_true,
	keyword_try,
	keyword_var,
	keyword_weak,
    keyword_yield,
	keyword_end,

	scalar_begin,
	scalar_bool,
	scalar_char, //16 bit unicode char
	scalar_int8,
	scalar_int16,
	scalar_int32,
	scalar_int64,
	scalar_uint8,
	scalar_uint16,
	scalar_uint32,
	scalar_uint64,
	scalar_sbyte,
	scalar_short,
	scalar_int,
	scalar_long,
	scalar_byte,
	scalar_ushort,
	scalar_uint,
	scalar_ulong,
	scalar_float32,
	scalar_float64,
	scalar_float,
	scalar_double,
	scalar_string,
	scalar_void,
	scalar_end,

	operator_begin,
	operator_left_paren,
	operator_right_paren,
	operator_left_bracket,
	operator_right_bracket,
	operator_left_brace,
	operator_right_brace,

	operator_plus,
	operator_minus,
	operator_div,
	operator_mod,
	operator_caret,
	operator_and,
	operator_or,
	operator_tilde,
	operator_not,
	operator_assign,
	operator_less,
	operator_greater,

	operator_plus_assign,
	operator_minus_assign,
	operator_mul_assign,
	operator_div_assign,
	operator_mod_assign,
	operator_xor_assign,
	operator_and_assign,
	operator_or_assign,
	operator_left_shift,
	operator_right_shift,
	operator_left_shift_assign,
	operator_right_shift_assign,

	operator_equal,
	operator_not_equal,
	operator_less_equal,
	operator_greater_equal,
	operator_and_and,
	operator_or_or,
	operator_plus_plus,
	operator_minus_minus,

	operator_comma,
	operator_question,
	operator_colon,
	operator_semicolon,
	operator_dot,
	operator_ellipsis,
	operator_end
}